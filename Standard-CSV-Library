>>  #We are required to review some basic skills that will help us with our exploration mission. The first of these is the retrieval and exportation of data represented in a Comma Separated Value (CSV) format.

#1.1.1
#Learn to read and write data from files using a Python Library.

#1.1.2
#Content Background and References
#The CSV Library is commonly used for reading and writing data. It comes standard in Python 2.7 (other versions have it as well, but we won't list them all - Google is your friend). If you find yourself wondering, "What is Data Science?" then check out the handbook entry: Data Science Defined. We encourage you to be a part of the Data Science community.

#1.1.3
#Data Set
#Artificially generated the data set used in this mission.

#1.1.4
#Mission
#Reading Data from a File
#In order to interact with data, we need to be able to load it into our console or script. 
#How to read in a CSV file:
  #Import the library 
  #Open the file of interest for reading ('r') 
  #Construct a reader 
  #Iterate through the file using the reader 
  #Close the file 
 
#Reinitialize
  #Objective 1 of 2 
    #Reading a CSV File
    #We start by opening a CSV file and reading its contents. 
      #Task 1
        #The library is imported and the file is already opened. Make a note of how it is done because you will be asked to do it later. 
        # Create the reader object by entering: 
reader = csv.reader(infile)
        # into the Python shell.


infile = open('sample.data','r') #the 'r' is for reading, use 'w' when writing
reader = csv.reader(infile)

      # Task 2
        #Using the reader object you just created, we can read in the file a line at a time by iterating through the reader. Type the following:
for line in reader:
  print line
# Note that Python is whitespace sensitive.
for line in reader:
... print line
['Field0', 'Field1', 'Field2', 'Field3']
['0', '1', '2', '3']
['or strings', 'can go', 'in here', 'too']
['3.14159', '2.71828', '0.577215', '0.207879576']
["'I'", "'wonder'", "'what space'", "'money looks like'"]

      # Task 3
        # Notice that the CSV reader formats the data into a list of strings for each row of data. This happens whether the data is an integer, float, character, or string. When the data already contains single quotes the reader adds an extra set of quotes. 
        #Last, close the file.
>>> infile.close()


# Note: In Python, single quotes and doubles quotes, in pairs, are generally interchangeable. It is a stylistic choice, but there are some useful implementations using both.
Writing Data to a File
Once we have processed data or completed some analysis, we want to write out data and results to a CSV file. 
How to write out a CSV:
Import the library 
Open the file for writing ('w') 
Construct a writer 
Write the rows using the writer 
Close the file 
Note: The reader is hard-coded to recognise either \r\n or \n as end-of-line and ignores a line terminator if given.
 
Reinitialize
Objective 2 of 2 
Writing a CSV File
Now, let's create a new CSV file and write some data into it. 
500 Points Earned
Task 1
Open the 'newfile.csv' file for writing and assign it to the outfile variable. 


>>> outfile = open('newfile.csv', 'w')

500 Points Earned
Task 2
Similar to the reader object, we need to create a writer object. Create the CSV writer object by entering the following:
out = csv.writer(outfile, lineterminator='\n')
Note: The string used to terminate lines produced by the writer defaults to \r\n. This may cause issues for non-Windows users if you do not know this is the default.



>>> out = csv.writer(outfile, lineterminator='\n')

500 Points Earned
Task 3
We can now iteratively write each line of the new CSV file. Each line should be in list format. Let's start with the first line being the header.
out.writerow(['this','is','your','header'])
>>> out.writerow(['this','is','your','header'])

500 Points Earned
Task 4
Next, we need to write lines to the file. Because our header was four columns, each line should be a list of four elements, as well. When creating loops you will notice that Python is whitespace sensitive. 
for i in range(10):
  out.writerow([i,i+1,i+2,i+3])
This writes ten rows of data into the file. Note that i starts at zero. 
>>> for i in range(10):
... out.writerow([i,i+1,i+2,i+3])

500 Points Earned
Task 5
Finally, make sure to close the file. 
>>> outfile.close()

Our file looks like this:
this,is,your,header
0,1,2,3
1,2,3,4
2,3,4,5
3,4,5,6
4,5,6,7
5,6,7,8
6,7,8,9
7,8,9,10
8,9,10,11
9,10,11,12
In the last objective, we mentioned Python being whitespace sensitive. The following three loops are equivalent. 
if fun in math: print "Yay!"; print fun;
print "Always prints."
if fun in math: 
    print "Yay!"; print fun;
print "Always prints."
if fun in math: 
    print "Yay!"
    print fun
print "Always prints."
However, the following is not equivalent.
if fun in math:
    print "Yay!"
print fun
print "Always prints."
In the last example, fun is printed outside of the loop. 
1.1.5
Final Thoughts
Awesome! We can now read in and write out CSV data. If the data was tab delimited or delimited using a different character, then we could add the delimiter='\t' argument to the constructor of the reader/writer.
